Grammar

    0 $accept: program_def $end

    1 program_def: prog_heading declarations main_block

    2 prog_heading: T_PROGRAM T_ID T_SEMICOLON

    3 declarations: decl T_SEMICOLON
    4             | declarations decl T_SEMICOLON

    5 decl: T_DECLARE id_list T_AS type
    6     | T_CONST T_ID T_ASSIGN constant

    7 constant: T_CONST_INT
    8         | T_CONST_STR

    9 id_list: T_ID
   10        | T_ID T_COMMA id_list

   11 main_block: compound_stmt

   12 compound_stmt: T_OPEN_CURLY stmt_seq T_CLOSE_CURLY

   13 stmt_seq: stmt
   14         | stmt_seq stmt

   15 stmt: simple_stmt T_SEMICOLON
   16     | structured_stmt
   17     | compound_stmt

   18 simple_stmt: assign_stmt
   19            | io_stmt

   20 structured_stmt: if_stmt
   21                | while_stmt

   22 assign_stmt: variable T_ASSIGN assign_rhs

   23 assign_rhs: expression
   24           | T_CONST_STR

   25 io_stmt: T_READ T_OPEN_PARAN variable T_CLOSE_PARAN
   26        | T_WRITE T_OPEN_PARAN assign_rhs T_CLOSE_PARAN

   27 if_stmt: T_IF T_OPEN_PARAN condition T_CLOSE_PARAN stmt

   28 while_stmt: T_WHILE T_OPEN_PARAN bool_expression T_CLOSE_PARAN stmt

   29 bool_expression: condition
   30                | T_OPEN_PARAN bool_expression T_CLOSE_PARAN bool_operator T_OPEN_PARAN bool_expression T_CLOSE_PARAN

   31 bool_operator: T_IS_NOT
   32              | T_BOOL_AND
   33              | T_BOOL_OR

   34 condition: expression relational_operator expression

   35 expression: term
   36           | term arit_operator term
   37           | T_OPEN_PARAN expression T_CLOSE_PARAN

   38 term: variable
   39     | T_CONST_INT

   40 relational_operator: T_EQUAL
   41                    | T_NOT_EQUAL
   42                    | T_LESS
   43                    | T_LESS_OR_EQUAL
   44                    | T_GREATER
   45                    | T_GREATER_OR_EQUAL

   46 arit_operator: T_ADD
   47              | T_SUB
   48              | T_MUL
   49              | T_DIV
   50              | T_MOD

   51 variable: T_ID
   52         | T_ID index_part

   53 index_part: T_OPEN_SQUARE expression T_CLOSE_SQUARE
   54           | T_OPEN_SQUARE expression T_CLOSE_SQUARE index_part

   55 type: array_type
   56     | scalar_type

   57 scalar_type: T_INT
   58            | T_CHAR

   59 array_type: scalar_type array_dimensions

   60 array_dimensions: T_OPEN_SQUARE T_CLOSE_SQUARE
   61                 | array_single_dimension
   62                 | array_single_dimension array_single_dimension
   63                 | array_single_dimension array_single_dimension array_single_dimension

   64 array_single_dimension: T_OPEN_SQUARE T_CONST_INT T_CLOSE_SQUARE


Terminals, with rules where they appear

$end (0) 0
error (256)
T_PROGRAM (258) 2
T_EQUAL (259) 40
T_IS_NOT (260) 31
T_NOT_EQUAL (261) 41
T_BOOL_AND (262) 32
T_BOOL_OR (263) 33
T_OPEN_PARAN (264) 25 26 27 28 30 37
T_CLOSE_PARAN (265) 25 26 27 28 30 37
T_OPEN_CURLY (266) 12
T_CLOSE_CURLY (267) 12
T_OPEN_SQUARE (268) 53 54 60 64
T_CLOSE_SQUARE (269) 53 54 60 64
T_MUL (270) 48
T_ADD (271) 46
T_SUB (272) 47
T_DIV (273) 49
T_MOD (274) 50
T_GREATER (275) 44
T_GREATER_OR_EQUAL (276) 45
T_LESS (277) 42
T_LESS_OR_EQUAL (278) 43
T_ASSIGN (279) 6 22
T_SEMICOLON (280) 2 3 4 15
T_COMMA (281) 10
T_DECLARE (282) 5
T_CONST (283) 6
T_AS (284) 5
T_READ (285) 25
T_WRITE (286) 26
T_WHILE (287) 28
T_IF (288) 27
T_CHAR (289) 58
T_INT (290) 57
T_ID (291) 2 6 9 10 51 52
T_CONST_INT (292) 7 39 64
T_CONST_STR (293) 8 24


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program_def (40)
    on left: 1, on right: 0
prog_heading (41)
    on left: 2, on right: 1
declarations (42)
    on left: 3 4, on right: 1 4
decl (43)
    on left: 5 6, on right: 3 4
constant (44)
    on left: 7 8, on right: 6
id_list (45)
    on left: 9 10, on right: 5 10
main_block (46)
    on left: 11, on right: 1
compound_stmt (47)
    on left: 12, on right: 11 17
stmt_seq (48)
    on left: 13 14, on right: 12 14
stmt (49)
    on left: 15 16 17, on right: 13 14 27 28
simple_stmt (50)
    on left: 18 19, on right: 15
structured_stmt (51)
    on left: 20 21, on right: 16
assign_stmt (52)
    on left: 22, on right: 18
assign_rhs (53)
    on left: 23 24, on right: 22 26
io_stmt (54)
    on left: 25 26, on right: 19
if_stmt (55)
    on left: 27, on right: 20
while_stmt (56)
    on left: 28, on right: 21
bool_expression (57)
    on left: 29 30, on right: 28 30
bool_operator (58)
    on left: 31 32 33, on right: 30
condition (59)
    on left: 34, on right: 27 29
expression (60)
    on left: 35 36 37, on right: 23 34 37 53 54
term (61)
    on left: 38 39, on right: 35 36
relational_operator (62)
    on left: 40 41 42 43 44 45, on right: 34
arit_operator (63)
    on left: 46 47 48 49 50, on right: 36
variable (64)
    on left: 51 52, on right: 22 25 38
index_part (65)
    on left: 53 54, on right: 52 54
type (66)
    on left: 55 56, on right: 5
scalar_type (67)
    on left: 57 58, on right: 56 59
array_type (68)
    on left: 59, on right: 55
array_dimensions (69)
    on left: 60 61 62 63, on right: 59
array_single_dimension (70)
    on left: 64, on right: 61 62 63


State 0

    0 $accept: . program_def $end

    T_PROGRAM  shift, and go to state 1

    program_def   go to state 2
    prog_heading  go to state 3


State 1

    2 prog_heading: T_PROGRAM . T_ID T_SEMICOLON

    T_ID  shift, and go to state 4


State 2

    0 $accept: program_def . $end

    $end  shift, and go to state 5


State 3

    1 program_def: prog_heading . declarations main_block

    T_DECLARE  shift, and go to state 6
    T_CONST    shift, and go to state 7

    declarations  go to state 8
    decl          go to state 9


State 4

    2 prog_heading: T_PROGRAM T_ID . T_SEMICOLON

    T_SEMICOLON  shift, and go to state 10


State 5

    0 $accept: program_def $end .

    $default  accept


State 6

    5 decl: T_DECLARE . id_list T_AS type

    T_ID  shift, and go to state 11

    id_list  go to state 12


State 7

    6 decl: T_CONST . T_ID T_ASSIGN constant

    T_ID  shift, and go to state 13


State 8

    1 program_def: prog_heading declarations . main_block
    4 declarations: declarations . decl T_SEMICOLON

    T_OPEN_CURLY  shift, and go to state 14
    T_DECLARE     shift, and go to state 6
    T_CONST       shift, and go to state 7

    decl           go to state 15
    main_block     go to state 16
    compound_stmt  go to state 17


State 9

    3 declarations: decl . T_SEMICOLON

    T_SEMICOLON  shift, and go to state 18


State 10

    2 prog_heading: T_PROGRAM T_ID T_SEMICOLON .

    $default  reduce using rule 2 (prog_heading)


State 11

    9 id_list: T_ID .
   10        | T_ID . T_COMMA id_list

    T_COMMA  shift, and go to state 19

    $default  reduce using rule 9 (id_list)


State 12

    5 decl: T_DECLARE id_list . T_AS type

    T_AS  shift, and go to state 20


State 13

    6 decl: T_CONST T_ID . T_ASSIGN constant

    T_ASSIGN  shift, and go to state 21


State 14

   12 compound_stmt: T_OPEN_CURLY . stmt_seq T_CLOSE_CURLY

    T_OPEN_CURLY  shift, and go to state 14
    T_READ        shift, and go to state 22
    T_WRITE       shift, and go to state 23
    T_WHILE       shift, and go to state 24
    T_IF          shift, and go to state 25
    T_ID          shift, and go to state 26

    compound_stmt    go to state 27
    stmt_seq         go to state 28
    stmt             go to state 29
    simple_stmt      go to state 30
    structured_stmt  go to state 31
    assign_stmt      go to state 32
    io_stmt          go to state 33
    if_stmt          go to state 34
    while_stmt       go to state 35
    variable         go to state 36


State 15

    4 declarations: declarations decl . T_SEMICOLON

    T_SEMICOLON  shift, and go to state 37


State 16

    1 program_def: prog_heading declarations main_block .

    $default  reduce using rule 1 (program_def)


State 17

   11 main_block: compound_stmt .

    $default  reduce using rule 11 (main_block)


State 18

    3 declarations: decl T_SEMICOLON .

    $default  reduce using rule 3 (declarations)


State 19

   10 id_list: T_ID T_COMMA . id_list

    T_ID  shift, and go to state 11

    id_list  go to state 38


State 20

    5 decl: T_DECLARE id_list T_AS . type

    T_CHAR  shift, and go to state 39
    T_INT   shift, and go to state 40

    type         go to state 41
    scalar_type  go to state 42
    array_type   go to state 43


State 21

    6 decl: T_CONST T_ID T_ASSIGN . constant

    T_CONST_INT  shift, and go to state 44
    T_CONST_STR  shift, and go to state 45

    constant  go to state 46


State 22

   25 io_stmt: T_READ . T_OPEN_PARAN variable T_CLOSE_PARAN

    T_OPEN_PARAN  shift, and go to state 47


State 23

   26 io_stmt: T_WRITE . T_OPEN_PARAN assign_rhs T_CLOSE_PARAN

    T_OPEN_PARAN  shift, and go to state 48


State 24

   28 while_stmt: T_WHILE . T_OPEN_PARAN bool_expression T_CLOSE_PARAN stmt

    T_OPEN_PARAN  shift, and go to state 49


State 25

   27 if_stmt: T_IF . T_OPEN_PARAN condition T_CLOSE_PARAN stmt

    T_OPEN_PARAN  shift, and go to state 50


State 26

   51 variable: T_ID .
   52         | T_ID . index_part

    T_OPEN_SQUARE  shift, and go to state 51

    $default  reduce using rule 51 (variable)

    index_part  go to state 52


State 27

   17 stmt: compound_stmt .

    $default  reduce using rule 17 (stmt)


State 28

   12 compound_stmt: T_OPEN_CURLY stmt_seq . T_CLOSE_CURLY
   14 stmt_seq: stmt_seq . stmt

    T_OPEN_CURLY   shift, and go to state 14
    T_CLOSE_CURLY  shift, and go to state 53
    T_READ         shift, and go to state 22
    T_WRITE        shift, and go to state 23
    T_WHILE        shift, and go to state 24
    T_IF           shift, and go to state 25
    T_ID           shift, and go to state 26

    compound_stmt    go to state 27
    stmt             go to state 54
    simple_stmt      go to state 30
    structured_stmt  go to state 31
    assign_stmt      go to state 32
    io_stmt          go to state 33
    if_stmt          go to state 34
    while_stmt       go to state 35
    variable         go to state 36


State 29

   13 stmt_seq: stmt .

    $default  reduce using rule 13 (stmt_seq)


State 30

   15 stmt: simple_stmt . T_SEMICOLON

    T_SEMICOLON  shift, and go to state 55


State 31

   16 stmt: structured_stmt .

    $default  reduce using rule 16 (stmt)


State 32

   18 simple_stmt: assign_stmt .

    $default  reduce using rule 18 (simple_stmt)


State 33

   19 simple_stmt: io_stmt .

    $default  reduce using rule 19 (simple_stmt)


State 34

   20 structured_stmt: if_stmt .

    $default  reduce using rule 20 (structured_stmt)


State 35

   21 structured_stmt: while_stmt .

    $default  reduce using rule 21 (structured_stmt)


State 36

   22 assign_stmt: variable . T_ASSIGN assign_rhs

    T_ASSIGN  shift, and go to state 56


State 37

    4 declarations: declarations decl T_SEMICOLON .

    $default  reduce using rule 4 (declarations)


State 38

   10 id_list: T_ID T_COMMA id_list .

    $default  reduce using rule 10 (id_list)


State 39

   58 scalar_type: T_CHAR .

    $default  reduce using rule 58 (scalar_type)


State 40

   57 scalar_type: T_INT .

    $default  reduce using rule 57 (scalar_type)


State 41

    5 decl: T_DECLARE id_list T_AS type .

    $default  reduce using rule 5 (decl)


State 42

   56 type: scalar_type .
   59 array_type: scalar_type . array_dimensions

    T_OPEN_SQUARE  shift, and go to state 57

    $default  reduce using rule 56 (type)

    array_dimensions        go to state 58
    array_single_dimension  go to state 59


State 43

   55 type: array_type .

    $default  reduce using rule 55 (type)


State 44

    7 constant: T_CONST_INT .

    $default  reduce using rule 7 (constant)


State 45

    8 constant: T_CONST_STR .

    $default  reduce using rule 8 (constant)


State 46

    6 decl: T_CONST T_ID T_ASSIGN constant .

    $default  reduce using rule 6 (decl)


State 47

   25 io_stmt: T_READ T_OPEN_PARAN . variable T_CLOSE_PARAN

    T_ID  shift, and go to state 26

    variable  go to state 60


State 48

   26 io_stmt: T_WRITE T_OPEN_PARAN . assign_rhs T_CLOSE_PARAN

    T_OPEN_PARAN  shift, and go to state 61
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62
    T_CONST_STR   shift, and go to state 63

    assign_rhs  go to state 64
    expression  go to state 65
    term        go to state 66
    variable    go to state 67


State 49

   28 while_stmt: T_WHILE T_OPEN_PARAN . bool_expression T_CLOSE_PARAN stmt

    T_OPEN_PARAN  shift, and go to state 68
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62

    bool_expression  go to state 69
    condition        go to state 70
    expression       go to state 71
    term             go to state 66
    variable         go to state 67


State 50

   27 if_stmt: T_IF T_OPEN_PARAN . condition T_CLOSE_PARAN stmt

    T_OPEN_PARAN  shift, and go to state 61
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62

    condition   go to state 72
    expression  go to state 71
    term        go to state 66
    variable    go to state 67


State 51

   53 index_part: T_OPEN_SQUARE . expression T_CLOSE_SQUARE
   54           | T_OPEN_SQUARE . expression T_CLOSE_SQUARE index_part

    T_OPEN_PARAN  shift, and go to state 61
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62

    expression  go to state 73
    term        go to state 66
    variable    go to state 67


State 52

   52 variable: T_ID index_part .

    $default  reduce using rule 52 (variable)


State 53

   12 compound_stmt: T_OPEN_CURLY stmt_seq T_CLOSE_CURLY .

    $default  reduce using rule 12 (compound_stmt)


State 54

   14 stmt_seq: stmt_seq stmt .

    $default  reduce using rule 14 (stmt_seq)


State 55

   15 stmt: simple_stmt T_SEMICOLON .

    $default  reduce using rule 15 (stmt)


State 56

   22 assign_stmt: variable T_ASSIGN . assign_rhs

    T_OPEN_PARAN  shift, and go to state 61
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62
    T_CONST_STR   shift, and go to state 63

    assign_rhs  go to state 74
    expression  go to state 65
    term        go to state 66
    variable    go to state 67


State 57

   60 array_dimensions: T_OPEN_SQUARE . T_CLOSE_SQUARE
   64 array_single_dimension: T_OPEN_SQUARE . T_CONST_INT T_CLOSE_SQUARE

    T_CLOSE_SQUARE  shift, and go to state 75
    T_CONST_INT     shift, and go to state 76


State 58

   59 array_type: scalar_type array_dimensions .

    $default  reduce using rule 59 (array_type)


State 59

   61 array_dimensions: array_single_dimension .
   62                 | array_single_dimension . array_single_dimension
   63                 | array_single_dimension . array_single_dimension array_single_dimension

    T_OPEN_SQUARE  shift, and go to state 77

    $default  reduce using rule 61 (array_dimensions)

    array_single_dimension  go to state 78


State 60

   25 io_stmt: T_READ T_OPEN_PARAN variable . T_CLOSE_PARAN

    T_CLOSE_PARAN  shift, and go to state 79


State 61

   37 expression: T_OPEN_PARAN . expression T_CLOSE_PARAN

    T_OPEN_PARAN  shift, and go to state 61
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62

    expression  go to state 80
    term        go to state 66
    variable    go to state 67


State 62

   39 term: T_CONST_INT .

    $default  reduce using rule 39 (term)


State 63

   24 assign_rhs: T_CONST_STR .

    $default  reduce using rule 24 (assign_rhs)


State 64

   26 io_stmt: T_WRITE T_OPEN_PARAN assign_rhs . T_CLOSE_PARAN

    T_CLOSE_PARAN  shift, and go to state 81


State 65

   23 assign_rhs: expression .

    $default  reduce using rule 23 (assign_rhs)


State 66

   35 expression: term .
   36           | term . arit_operator term

    T_MUL  shift, and go to state 82
    T_ADD  shift, and go to state 83
    T_SUB  shift, and go to state 84
    T_DIV  shift, and go to state 85
    T_MOD  shift, and go to state 86

    $default  reduce using rule 35 (expression)

    arit_operator  go to state 87


State 67

   38 term: variable .

    $default  reduce using rule 38 (term)


State 68

   30 bool_expression: T_OPEN_PARAN . bool_expression T_CLOSE_PARAN bool_operator T_OPEN_PARAN bool_expression T_CLOSE_PARAN
   37 expression: T_OPEN_PARAN . expression T_CLOSE_PARAN

    T_OPEN_PARAN  shift, and go to state 68
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62

    bool_expression  go to state 88
    condition        go to state 70
    expression       go to state 89
    term             go to state 66
    variable         go to state 67


State 69

   28 while_stmt: T_WHILE T_OPEN_PARAN bool_expression . T_CLOSE_PARAN stmt

    T_CLOSE_PARAN  shift, and go to state 90


State 70

   29 bool_expression: condition .

    $default  reduce using rule 29 (bool_expression)


State 71

   34 condition: expression . relational_operator expression

    T_EQUAL             shift, and go to state 91
    T_NOT_EQUAL         shift, and go to state 92
    T_GREATER           shift, and go to state 93
    T_GREATER_OR_EQUAL  shift, and go to state 94
    T_LESS              shift, and go to state 95
    T_LESS_OR_EQUAL     shift, and go to state 96

    relational_operator  go to state 97


State 72

   27 if_stmt: T_IF T_OPEN_PARAN condition . T_CLOSE_PARAN stmt

    T_CLOSE_PARAN  shift, and go to state 98


State 73

   53 index_part: T_OPEN_SQUARE expression . T_CLOSE_SQUARE
   54           | T_OPEN_SQUARE expression . T_CLOSE_SQUARE index_part

    T_CLOSE_SQUARE  shift, and go to state 99


State 74

   22 assign_stmt: variable T_ASSIGN assign_rhs .

    $default  reduce using rule 22 (assign_stmt)


State 75

   60 array_dimensions: T_OPEN_SQUARE T_CLOSE_SQUARE .

    $default  reduce using rule 60 (array_dimensions)


State 76

   64 array_single_dimension: T_OPEN_SQUARE T_CONST_INT . T_CLOSE_SQUARE

    T_CLOSE_SQUARE  shift, and go to state 100


State 77

   64 array_single_dimension: T_OPEN_SQUARE . T_CONST_INT T_CLOSE_SQUARE

    T_CONST_INT  shift, and go to state 76


State 78

   62 array_dimensions: array_single_dimension array_single_dimension .
   63                 | array_single_dimension array_single_dimension . array_single_dimension

    T_OPEN_SQUARE  shift, and go to state 77

    $default  reduce using rule 62 (array_dimensions)

    array_single_dimension  go to state 101


State 79

   25 io_stmt: T_READ T_OPEN_PARAN variable T_CLOSE_PARAN .

    $default  reduce using rule 25 (io_stmt)


State 80

   37 expression: T_OPEN_PARAN expression . T_CLOSE_PARAN

    T_CLOSE_PARAN  shift, and go to state 102


State 81

   26 io_stmt: T_WRITE T_OPEN_PARAN assign_rhs T_CLOSE_PARAN .

    $default  reduce using rule 26 (io_stmt)


State 82

   48 arit_operator: T_MUL .

    $default  reduce using rule 48 (arit_operator)


State 83

   46 arit_operator: T_ADD .

    $default  reduce using rule 46 (arit_operator)


State 84

   47 arit_operator: T_SUB .

    $default  reduce using rule 47 (arit_operator)


State 85

   49 arit_operator: T_DIV .

    $default  reduce using rule 49 (arit_operator)


State 86

   50 arit_operator: T_MOD .

    $default  reduce using rule 50 (arit_operator)


State 87

   36 expression: term arit_operator . term

    T_ID         shift, and go to state 26
    T_CONST_INT  shift, and go to state 62

    term      go to state 103
    variable  go to state 67


State 88

   30 bool_expression: T_OPEN_PARAN bool_expression . T_CLOSE_PARAN bool_operator T_OPEN_PARAN bool_expression T_CLOSE_PARAN

    T_CLOSE_PARAN  shift, and go to state 104


State 89

   34 condition: expression . relational_operator expression
   37 expression: T_OPEN_PARAN expression . T_CLOSE_PARAN

    T_EQUAL             shift, and go to state 91
    T_NOT_EQUAL         shift, and go to state 92
    T_CLOSE_PARAN       shift, and go to state 102
    T_GREATER           shift, and go to state 93
    T_GREATER_OR_EQUAL  shift, and go to state 94
    T_LESS              shift, and go to state 95
    T_LESS_OR_EQUAL     shift, and go to state 96

    relational_operator  go to state 97


State 90

   28 while_stmt: T_WHILE T_OPEN_PARAN bool_expression T_CLOSE_PARAN . stmt

    T_OPEN_CURLY  shift, and go to state 14
    T_READ        shift, and go to state 22
    T_WRITE       shift, and go to state 23
    T_WHILE       shift, and go to state 24
    T_IF          shift, and go to state 25
    T_ID          shift, and go to state 26

    compound_stmt    go to state 27
    stmt             go to state 105
    simple_stmt      go to state 30
    structured_stmt  go to state 31
    assign_stmt      go to state 32
    io_stmt          go to state 33
    if_stmt          go to state 34
    while_stmt       go to state 35
    variable         go to state 36


State 91

   40 relational_operator: T_EQUAL .

    $default  reduce using rule 40 (relational_operator)


State 92

   41 relational_operator: T_NOT_EQUAL .

    $default  reduce using rule 41 (relational_operator)


State 93

   44 relational_operator: T_GREATER .

    $default  reduce using rule 44 (relational_operator)


State 94

   45 relational_operator: T_GREATER_OR_EQUAL .

    $default  reduce using rule 45 (relational_operator)


State 95

   42 relational_operator: T_LESS .

    $default  reduce using rule 42 (relational_operator)


State 96

   43 relational_operator: T_LESS_OR_EQUAL .

    $default  reduce using rule 43 (relational_operator)


State 97

   34 condition: expression relational_operator . expression

    T_OPEN_PARAN  shift, and go to state 61
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62

    expression  go to state 106
    term        go to state 66
    variable    go to state 67


State 98

   27 if_stmt: T_IF T_OPEN_PARAN condition T_CLOSE_PARAN . stmt

    T_OPEN_CURLY  shift, and go to state 14
    T_READ        shift, and go to state 22
    T_WRITE       shift, and go to state 23
    T_WHILE       shift, and go to state 24
    T_IF          shift, and go to state 25
    T_ID          shift, and go to state 26

    compound_stmt    go to state 27
    stmt             go to state 107
    simple_stmt      go to state 30
    structured_stmt  go to state 31
    assign_stmt      go to state 32
    io_stmt          go to state 33
    if_stmt          go to state 34
    while_stmt       go to state 35
    variable         go to state 36


State 99

   53 index_part: T_OPEN_SQUARE expression T_CLOSE_SQUARE .
   54           | T_OPEN_SQUARE expression T_CLOSE_SQUARE . index_part

    T_OPEN_SQUARE  shift, and go to state 51

    $default  reduce using rule 53 (index_part)

    index_part  go to state 108


State 100

   64 array_single_dimension: T_OPEN_SQUARE T_CONST_INT T_CLOSE_SQUARE .

    $default  reduce using rule 64 (array_single_dimension)


State 101

   63 array_dimensions: array_single_dimension array_single_dimension array_single_dimension .

    $default  reduce using rule 63 (array_dimensions)


State 102

   37 expression: T_OPEN_PARAN expression T_CLOSE_PARAN .

    $default  reduce using rule 37 (expression)


State 103

   36 expression: term arit_operator term .

    $default  reduce using rule 36 (expression)


State 104

   30 bool_expression: T_OPEN_PARAN bool_expression T_CLOSE_PARAN . bool_operator T_OPEN_PARAN bool_expression T_CLOSE_PARAN

    T_IS_NOT    shift, and go to state 109
    T_BOOL_AND  shift, and go to state 110
    T_BOOL_OR   shift, and go to state 111

    bool_operator  go to state 112


State 105

   28 while_stmt: T_WHILE T_OPEN_PARAN bool_expression T_CLOSE_PARAN stmt .

    $default  reduce using rule 28 (while_stmt)


State 106

   34 condition: expression relational_operator expression .

    $default  reduce using rule 34 (condition)


State 107

   27 if_stmt: T_IF T_OPEN_PARAN condition T_CLOSE_PARAN stmt .

    $default  reduce using rule 27 (if_stmt)


State 108

   54 index_part: T_OPEN_SQUARE expression T_CLOSE_SQUARE index_part .

    $default  reduce using rule 54 (index_part)


State 109

   31 bool_operator: T_IS_NOT .

    $default  reduce using rule 31 (bool_operator)


State 110

   32 bool_operator: T_BOOL_AND .

    $default  reduce using rule 32 (bool_operator)


State 111

   33 bool_operator: T_BOOL_OR .

    $default  reduce using rule 33 (bool_operator)


State 112

   30 bool_expression: T_OPEN_PARAN bool_expression T_CLOSE_PARAN bool_operator . T_OPEN_PARAN bool_expression T_CLOSE_PARAN

    T_OPEN_PARAN  shift, and go to state 113


State 113

   30 bool_expression: T_OPEN_PARAN bool_expression T_CLOSE_PARAN bool_operator T_OPEN_PARAN . bool_expression T_CLOSE_PARAN

    T_OPEN_PARAN  shift, and go to state 68
    T_ID          shift, and go to state 26
    T_CONST_INT   shift, and go to state 62

    bool_expression  go to state 114
    condition        go to state 70
    expression       go to state 71
    term             go to state 66
    variable         go to state 67


State 114

   30 bool_expression: T_OPEN_PARAN bool_expression T_CLOSE_PARAN bool_operator T_OPEN_PARAN bool_expression . T_CLOSE_PARAN

    T_CLOSE_PARAN  shift, and go to state 115


State 115

   30 bool_expression: T_OPEN_PARAN bool_expression T_CLOSE_PARAN bool_operator T_OPEN_PARAN bool_expression T_CLOSE_PARAN .

    $default  reduce using rule 30 (bool_expression)
